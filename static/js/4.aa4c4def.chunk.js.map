{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Interlocutors/Interlocutors.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Chat/Chat.jsx","components/Dialogs/Interlocutors/Interlocutors.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["authProps","state","isAuth","authentication","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","maxLength5","maxLengthCreator","ReduxChatForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","type","Chat","Message","className","s","message","messages","messagesData","map","e","id","wrap","formData","onSendMessage","Interlocutors","Conversation","item","Conversations","Dialogs","interlocutors","chat","onNewMessageChange","compose","dialogs","dispatch","sendMessageActionCreator"],"mappings":"0LAIIA,EAAY,SAACC,GACb,MAAO,CACHC,OAAQD,EAAME,eAAeD,SAiBtBE,IAbQ,SAACC,GAAe,IAC7BC,EAD4B,uKAG1B,OAAKC,KAAKC,MAAMN,OACR,cAACG,EAAD,eAAeE,KAAKC,QADG,cAAC,IAAD,CAAUC,GAAG,eAHlB,GACFC,IAAML,WAOtC,OADwBM,kBAAQX,EAAW,GAAnBW,CAAuBL,K,0CChBnDM,EAAOC,QAAU,CAAC,KAAO,8B,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,cAAgB,+BAA+B,KAAO,wB,8GCKjGC,EAAaC,YAAiB,GAU9BC,EAAgBC,YAAU,CAAEC,KAAM,aAAlBD,EATL,SAACT,GACZ,OACI,uBAAMW,SAAUX,EAAMY,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWC,IAAUC,SAAU,CAACC,IAAUZ,GAAaa,YAAY,gCACzF,uBACA,wBAAQC,KAAK,SAAb,iCA4BGC,MAtBf,SAAcrB,GACV,IAAMsB,EAAU,SAACtB,GACb,OACI,qBAAKuB,UAAWC,IAAEC,QAAlB,SACKzB,EAAMyB,WAGfC,EAAW1B,EAAMP,MAAMkC,aAAaC,KAAI,SAAAC,GAAC,OAAI,cAACP,EAAD,CAASG,QAASI,EAAEJ,SAAcI,EAAEC,OAMrF,OACI,sBAAKP,UAAWC,IAAEO,KAAlB,UACKL,EAED,cAAClB,EAAD,CAAeG,SARR,SAACqB,GACZ,IAAIP,EAAUO,EAASP,QACvBzB,EAAMiC,cAAcR,U,0BCLbS,MApBf,SAAuBlC,GAEnB,IAAMmC,EAAe,SAACnC,GAClB,OACI,cAAC,IAAD,CAASC,GAAI,YAAcD,EAAM8B,GAAIP,UAAWC,IAAEY,KAAlD,SACI,4BAAIpC,EAAMc,UAKlBuB,EAAgBrC,EAAMP,MAAMmC,KAAI,SAAAC,GAAC,OACjC,cAACM,EAAD,CAAyBL,GAAID,EAAEC,GAAIhB,KAAMe,EAAEf,MAAxBe,EAAEC,OAEzB,OACI,qBAAKP,UAAWC,IAAEO,KAAlB,SACKM,K,kBCDEC,EAVD,SAACtC,GACX,OACI,sBAAKuB,UAAWC,IAAEO,KAAlB,UACI,qBAAKR,UAAWC,IAAEe,cAAlB,SAAiC,cAAC,EAAD,CAAe9C,MAAOO,EAAMP,MAAM8C,kBACnE,qBAAKhB,UAAWC,IAAEgB,KAAlB,SAAwB,cAAC,EAAD,CAAM/C,MAAOO,EAAMP,MAAOwC,cAAejC,EAAMiC,cAAeQ,mBAAoBzC,EAAMyC,2B,iCCQ7GC,sBACXvC,mBAdkB,SAACV,GACnB,MAAO,CACHA,MAAOA,EAAMkD,YAII,SAACC,GACtB,MAAO,CACHX,cAAe,SAACR,GACZmB,EAASC,YAAyBpB,SAM1C7B,IAFW8C,CAGbJ","file":"static/js/4.aa4c4def.chunk.js","sourcesContent":["import { Redirect } from 'react-router-dom';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nlet authProps = (state) => {\r\n    return {\r\n        isAuth: state.authentication.isAuth\r\n    }\r\n}\r\n\r\nlet withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return (<Component {...this.props} />)\r\n        }\r\n    }\r\n    let withAuthContainer = connect(authProps, {})(RedirectComponent)\r\n    return withAuthContainer;\r\n}\r\n\r\n\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Interlocutors_wrap__AcunL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Dialogs_wrap__34S7v\",\"interlocutors\":\"Dialogs_interlocutors__2JE4S\",\"chat\":\"Dialogs_chat__1V1DM\"};","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/formValidators';\r\nimport { Textarea } from '../../common/Preloader/formsControlls/FormsControlls';\r\nimport s from './Chat.module.css'\r\n\r\nlet maxLength5 = maxLengthCreator(5);\r\nlet ChatForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='message' component={Textarea} validate={[required, maxLength5]} placeholder='send message to your friend' />\r\n            <br></br>\r\n            <button type='submit'>Send Message </button>\r\n        </form>\r\n    )\r\n}\r\nlet ReduxChatForm = reduxForm({ form: 'reduxChat' })(ChatForm)\r\n\r\nfunction Chat(props) {\r\n    const Message = (props) => {\r\n        return (\r\n            <div className={s.message}>\r\n                {props.message}\r\n            </div>);\r\n    }\r\n    let messages = props.state.messagesData.map(e => <Message message={e.message} key={e.id} />);\r\n\r\n    let onSubmit = (formData) => {\r\n        let message = formData.message\r\n        props.onSendMessage(message)\r\n    }\r\n    return (\r\n        <div className={s.wrap}>\r\n            {messages}\r\n\r\n            <ReduxChatForm onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport s from './Interlocutors.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction Interlocutors(props) {\r\n\r\n    const Conversation = (props) => {\r\n        return (\r\n            <NavLink to={'/dialogs/' + props.id} className={s.item} >\r\n                <p>{props.name}</p>\r\n            </NavLink>\r\n        )\r\n    }\r\n\r\n    let Conversations = props.state.map(e =>\r\n        <Conversation key={e.id} id={e.id} name={e.name} />);\r\n\r\n    return (\r\n        <div className={s.wrap}>\r\n            {Conversations}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Interlocutors;","import React from 'react';\r\nimport Chat from './Chat/Chat';\r\nimport Interlocutors from './Interlocutors/Interlocutors';\r\nimport s from './Dialogs.module.css'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nlet Dialogs = (props) => {\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div className={s.interlocutors}><Interlocutors state={props.state.interlocutors} /></div>\r\n            <div className={s.chat}><Chat state={props.state} onSendMessage={props.onSendMessage} onNewMessageChange={props.onNewMessageChange} /></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import Dialogs from './Dialogs'\r\nimport { sendMessageActionCreator } from '../../redux/dialogsReducer';\r\nimport { connect } from 'react-redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.dialogs,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMessage: (message) => {\r\n            dispatch(sendMessageActionCreator(message))\r\n        },\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}